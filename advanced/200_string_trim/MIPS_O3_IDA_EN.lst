str_trim:
; IDA is not aware of local variable names, we gave them manually:
saved_GP          = -0x10
saved_S0           = -8
saved_RA           = -4

                lui     $gp, (__gnu_local_gp >> 16)
                addiu   $sp, -0x20
                la      $gp, (__gnu_local_gp & 0xFFFF)
                sw      $ra, 0x20+saved_RA($sp)
                sw      $s0, 0x20+saved_S0($sp)
                sw      $gp, 0x20+saved_GP($sp)
; call strlen(). input string address is still in \$a0, strlen() will take it from there:
                lw      $t9, (strlen & 0xFFFF)($gp)
                or      $at, $zero ; load delay slot, NOP
                jalr    $t9
; input string address is still in \$a0, put it to \$s0:
                move    $s0, $a0   ; branch delay slot
; result of strlen() (i.e, length of string) is in \$v0 now
; jump to exit if \$v0==0 (i.e., if length of string is 0):
                beqz    $v0, exit
                or      $at, $zero ; branch delay slot, NOP
                addiu   $a1, $v0, -1
; \$a1 = \$v0-1 = str\_len-1
                addu    $a1, $s0, $a1
; \$a1 = input string address + \$a1 = s+strlen-1
; load byte at address \$a1:
                lb      $a0, 0($a1)
                or      $at, $zero ; load delay slot, NOP
; loaded byte is zero? jump to exit if its so:
                beqz    $a0, exit
                or      $at, $zero ; branch delay slot, NOP
                addiu   $v1, $v0, -2
; \$v1 = str\_len-2
                addu    $v1, $s0, $v1
; \$v1 = \$s0+\$v1 = s+str\_len-2
                li      $a2, 0xD
; skip loop body:
                b       loc_6C
                li      $a3, 0xA   ; branch delay slot
loc_5C:
; load next byte from memory to \$a0:
                lb      $a0, 0($v1)
                move    $a1, $v1
; \$a1=s+str\_len-2
; jump to exit if loaded byte is zero:
                beqz    $a0, exit
; decrement str\_len:
                addiu   $v1, -1    ; branch delay slot
loc_6C:
; at this moment, \$a0=loaded byte, \$a2=0xD (CR symbol) and \$a3=0xA (LF symbol)
; loaded byte is CR? jump to loc\_7C then:
                beq     $a0, $a2, loc_7C
                addiu   $v0, -1    ; branch delay slot
; loaded byte is LF? jump to exit if its not LF:
                bne     $a0, $a3, exit
                or      $at, $zero ; branch delay slot, NOP
loc_7C:
; loaded byte is CR at this moment
; jump to loc\_5c (loop body begin) if str\_len (in \$v0) is not zero:
                bnez    $v0, loc_5C
; simultaneously, store zero at that place in memory:
                sb      $zero, 0($a1) ; branch delay slot
; "exit" label was named by me manually:
exit:
                lw      $ra, 0x20+saved_RA($sp)
                move    $v0, $s0
                lw      $s0, 0x20+saved_S0($sp)
                jr      $ra
                addiu   $sp, 0x20     ; branch delay slot
