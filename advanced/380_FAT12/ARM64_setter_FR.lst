<put_to_array>:
W0 = idx
W1 = val
  54:           lsr     w3, w0, #1
; W3 = W0>>1 = idx>>1
  58:           lsl     w2, w3, #2
; \verb|W2 = W3<<2 = (W0>>1)<<2 = (idx&(~1))<<1|
  5c:           sub     w2, w2, w3
; \verb|W2 = W2-W3 = (idx&(~1))<<1 - idx>>1 = idx*1.5|
; sauter si le bit le plus bas de idx est 1:
  60:           tbnz    w0, #0, 94 <put_to_array+0x40>

; idx est pair, continuer:
  64:           adrp    x0, page of array
  68:           add     w3, w2, #0x1
; W3 = W2+1 = idx*1.5+1, i.e., offset de l'octet du milieu
  6c:           add     x0, x0, offset of array within page
; X0 = adresse de array
  70:           lsr     w4, w1, #4
; W4 = W1>>4 = val>>4
  74:           sxtw    x3, w3
; X3 = W3 (idx*1.5+1) avec signe étendu de 32-bit à 64-bit
; l'extension du signe est nécessaire car la valeur sera utilisée comme un offset dans
; le tableau, et les offsets négatifs sont possible dans le standard C/C++
  78:           ubfiz   w1, w1, #4, #4
; W1 = W1<<4 = val<<4
; stocker W4 (val>>4) en X0+W2 = array + idx*1.5, i.e., adresse de l'octet de gauche:
  7c:           strb    w4, [x0,w2,sxtw]
; charger l'octet du milieu en X0+X3 = array+idx*1.5+1
  80:           ldrb    w2, [x0,x3]
; W2 = octet du milieu
  84:           and     w2, w2, #0xf
; \verb|W2 = W2&0xF = middle_byte&0xF (les 4 bits hauts dans l'octet du milieu sont supprimés)|
; fusionner les parties de la nouvelle version du l'octet du milieu:
  88:           orr     w1, w2, w1
; \verb!W1 = W2|W1 = middle_byte&0xF | val<<4!
; stocker W2 (nouvel octet du milieu) en X0+X3 = array+idx*1.5+1
  8c:           strb    w1, [x0,x3]
  90:           ret

; idx est impair, continuer:
  94:           add     w4, w2, #0x1
; W4 = W2+1 = idx*1.5+1, i.e., offset de l'octet du milieu
  98:           adrp    x0, page of array
  9c:           add     x0, x0, offset of array within page
; X0 = adresse de array
  a0:           add     w2, w2, #0x2
; W2 = W2+2 = idx*1.5+2, i.e., offset de l'octet de droite
  a4:           sxtw    x4, w4
; X4 = version 64-bit avec signe étendu de W4 32-bit
; charger en X0+X4 = array+idx*1.5+1:
  a8:           ldrb    w3, [x0,x4]
; W3 = octet du milieu
  ac:           and     w3, w3, #0xfffffff0
; \verb|W3 = W3&0xFFFFFFF0 = middle_byte&0xFFFFFFF0, i.e., effacer les 4 bits les plus bas|
  b0:           orr     w3, w3, w1, lsr #8
; \verb!W3 = W3|W1>>8 = middle_byte&0xFFFFFFF0 | val>>8!
; stocker la nouvelle version de l'octet du milieu en X0+X4=array+idx*1.5+1:
  b4:           strb    w3, [x0,x4]
; maintenant stocker les 8 bits les plus bas de val (dans W1) en X0+W2=array+idx*1.5+2, i.e.,
; emplacement de l'octet de droite
; le suffixe SXTW signifie que W2 va être étendu en une valeur 64-bit avant de l'ajouter avec X0
  b8:           strb    w1, [x0,w2,sxtw]
  bc:           ret

