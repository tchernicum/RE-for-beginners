float_rand
                STMFD   SP!, {R3,LR}
                BL      my_rand
; R0=valeur pseudo-aléatoire
                FLDS    S0, =1.0
; S0=1.0
                BIC     R3, R0, #0xFF000000
                BIC     R3, R3, #0x800000
                ORR     R3, R3, #0x3F800000
; R3=valeur pseudo-aléatoire \& 0x007fffff | 0x3f800000
; copier de R3 vers FPU (registre S15).
; ça se comporte comme une copie bit à bit, pas de conversion faite:
                FMSR    S15, R3
; soustraire 1.0 et laisser le résultat dans S0:
                FSUBS   S0, S15, S0
                LDMFD   SP!, {R3,PC}

flt_5C          DCFS 1.0

main
                STMFD   SP!, {R4,LR}
                MOV     R0, #0
                BL      time
                BL      my_srand
                MOV     R4, #0x64 ; 'd'

loc_78
                BL      float_rand
; S0=valeur pseudo-aléatoire
                LDR     R0, =aF         ; "\%f"
; convertir la valeur obtenue en type double (printf() en a besoin):
                FCVTDS  D7, S0
; copie bit à bit de D7 dans la paire de registres R2/R3 (pour printf()):
                FMRRD   R2, R3, D7
                BL      printf
                SUBS    R4, R4, #1
                BNE     loc_78
                MOV     R0, R4
                LDMFD   SP!, {R4,PC}

aF              DCB "%f",0xA,0
