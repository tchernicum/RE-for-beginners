f:
; $f12-$f13=A
; $f14-$f15=B
                lui     $v0, (dword_C4 >> 16) ; ?
; charge la partie 32-bit basse de la constante 3.14 dans $f0:
                lwc1    $f0, dword_BC
                or      $at, $zero            ; slot de d§é§lai de chargement, NOP
; charge la partie 32-bit haute de la constante 3.14 dans $f1:
                lwc1    $f1, $LC0
                lui     $v0, ($LC1 >> 16)     ; ?
; A dans $f12-$f13, la constante 3.14 dans $f0-$f1, effectuer la division:
                div.d   $f0, $f12, $f0
; $f0-$f1=A/3.14
; charge la partie 32-bit basse de la constante 4.1 dans $f2:
                lwc1    $f2, dword_C4
                or      $at, $zero            ; slot de d§é§lai de chargement, NOP
; charge la partie 32-bit haute de la constante 4.1 dans $f3:
                lwc1    $f3, $LC1
                or      $at, $zero            ; slot de d§é§lai de chargement, NOP
; B dans $f14-$f15, la constante 4.1 dans $f2-$f3, effectuer la multiplication:
                mul.d   $f2, $f14, $f2
; $f2-$f3=B*4.1
                jr      $ra
; ajouter les parties 64-bit et laisser le r§é§sultat dans $f0-$f1:
                add.d   $f0, $f2              ; slot de d§é§lai de branchement, NOP


.rodata.cst8:000000B8 $LC0:           .word 0x40091EB8         # DATA XREF: f+C
.rodata.cst8:000000BC dword_BC:       .word 0x51EB851F         # DATA XREF: f+4
.rodata.cst8:000000C0 $LC1:           .word 0x40106666         # DATA XREF: f+10
.rodata.cst8:000000C4 dword_C4:       .word 0x66666666         # DATA XREF: f
