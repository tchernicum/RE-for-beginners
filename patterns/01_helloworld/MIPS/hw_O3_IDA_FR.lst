.text:00000000 main:
.text:00000000
.text:00000000 var_10          = -0x10
.text:00000000 var_4           = -4
.text:00000000
; prologue de la fonction.
; définir GP:
.text:00000000                 lui     $gp, (__gnu_local_gp >> 16)
.text:00000004                 addiu   $sp, -0x20
.text:00000008                 la      $gp, (__gnu_local_gp & 0xFFFF)
; sauver RA sur la pile locale:
.text:0000000C                 sw      $ra, 0x20+var_4($sp)
; sauver GP sur la pile locale:
; pour une raison, cette instruction manque dans la sortie en assembleur de GCC:
.text:00000010                 sw      $gp, 0x20+var_10($sp)
; charger l'adresse de la fonction puts() dans \$9 depuis GP:
.text:00000014                 lw      $t9, (puts & 0xFFFF)($gp)
; générer l'adresse de la chaîne de texte dans \$a0:
.text:00000018                 lui     $a0, ($LC0 >> 16)  # "Hello, world!"
; sauter à puts(), en sauvant l'adresse de retour dans le register link:
.text:0000001C                 jalr    $t9
.text:00000020                 la      $a0, ($LC0 & 0xFFFF)  # "Hello, world!"
; restaurer RA:
.text:00000024                 lw      $ra, 0x20+var_4($sp)
; copier 0 depuis \$zero dans \$v0:
.text:00000028                 move    $v0, $zero
; retourner en sautant à la valeur dans RA:
.text:0000002C                 jr      $ra
; épilogue de la fonction:
.text:00000030                 addiu   $sp, 0x20
