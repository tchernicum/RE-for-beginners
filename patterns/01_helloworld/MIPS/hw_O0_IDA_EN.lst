.text:00000000 main:
.text:00000000
.text:00000000 var_10          = -0x10
.text:00000000 var_8           = -8
.text:00000000 var_4           = -4
.text:00000000
; function prologue.
; save the RA and FP in the stack:
.text:00000000                 addiu   $sp, -0x20
.text:00000004                 sw      $ra, 0x20+var_4($sp)
.text:00000008                 sw      $fp, 0x20+var_8($sp)
; set the FP (stack frame pointer):
.text:0000000C                 move    $fp, $sp
; set the GP:
.text:00000010                 la      $gp, __gnu_local_gp
.text:00000018                 sw      $gp, 0x20+var_10($sp)
; load the address of the text string:
.text:0000001C                 lui     $v0, (aHelloWorld >> 16)  # "Hello, world!"
.text:00000020                 addiu   $a0, $v0, (aHelloWorld & 0xFFFF)  # "Hello, world!"
; load the address of puts() using the GP:
.text:00000024                 lw      $v0, (puts & 0xFFFF)($gp)
.text:00000028                 or      $at, $zero ; NOP
; call puts():
.text:0000002C                 move    $t9, $v0
.text:00000030                 jalr    $t9
.text:00000034                 or      $at, $zero ; NOP
; restore the GP from local stack:
.text:00000038                 lw      $gp, 0x20+var_10($fp)
; set register \$2 (\$V0) to zero:
.text:0000003C                 move    $v0, $zero
; function epilogue.
; restore the SP:
.text:00000040                 move    $sp, $fp
; restore the RA:
.text:00000044                 lw      $ra, 0x20+var_4($sp)
; restore the FP:
.text:00000048                 lw      $fp, 0x20+var_8($sp)
.text:0000004C                 addiu   $sp, 0x20
; jump to the RA:
.text:00000050                 jr      $ra
.text:00000054                 or      $at, $zero ; NOP
